authTableSigningKey: "placeholder see sops" 
authTableCryptoKey: "placeholder see sops" 

authRootAccessTokenLength: 65
authRootAccessTokenOverrideSpecial: "_-"

authWebsocktunnelSecret: "placeholder see sops" 

authRabbitmqUserSource: "modules/rabbitmq-user"
authRabbitmqUserPrefix: "${var.prefix}"
authRabbitmqUserProjectName: "taskcluster-auth"
authRabbitmqUserRabbitmqVhost: "${var.rabbitmq_vhost}"

authSecretsSource: "modules/service-secrets"
authSecretsProjectName: "taskcluster-auth"
authSecretsDisabledServices: "${var.disabled_services}"

authWebServiceSource: "modules/deployment"
authWebServiceProjectName: "taskcluster-auth"
authWebServiceServiceName: "auth"
authWebServiceProcName: "web"
authWebServiceDisabledServices: "${var.disabled_services}"
authWebServiceReadinessPath: "/api/auth/v1/ping"
authWebServiceSecretName: "${module.auth_secrets.secret_name}"
authWebServiceSecretsHash: "${module.auth_secrets.secrets_hash}"
authWebServiceRootUrl: "${var.root_url}"
authWebServiceSecretKeys: "${module.auth_secrets.env_var_keys}"
authWebServiceDockerImage: "${local.taskcluster_image_monoimage}"
authPurgeExpiredClientsSource: "modules/scheduled-job"
authPurgeExpiredClientsProjectName: "taskcluster-auth"
authPurgeExpiredClientsServiceName: "auth"
authPurgeExpiredClientsJobName: "purgeExpiredClients"
authPurgeExpiredClientsSchedule: "0 0 * * *"
authPurgeExpiredClientsDeadlineSeconds: 86400
authPurgeExpiredClientsSecretName: "${module.auth_secrets.secret_name}"
authPurgeExpiredClientsSecretsHash: "${module.auth_secrets.secrets_hash}"
authPurgeExpiredClientsRootUrl: "${var.root_url}"
authPurgeExpiredClientsSecretKeys: "${module.auth_secrets.env_var_keys}"
authPurgeExpiredClientsDockerImage: "${local.taskcluster_image_monoimage}"

#locals {
#  static_clients = [
#    {
#      clientId    = "static/taskcluster/secrets"
#      accessToken = "${random_string.secrets_access_token.result}"
#      description = "..."
#
#      scopes = [
#        "auth:azure-table-access:${azurerm_storage_account.base.name}/Secrets",
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/Secrets",
#      ]
#    },
#    {
#      clientId    = "static/taskcluster/index"
#      accessToken = "${random_string.index_access_token.result}"
#      description = "..."
#
#      scopes = [
#        "auth:azure-table-access:${azurerm_storage_account.base.name}/IndexedTasks",
#        "auth:azure-table-access:${azurerm_storage_account.base.name}/Namespaces",
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/IndexedTasks",
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/Namespaces",
#        "queue:get-artifact:*",
#      ]
#    },
#    {
#      clientId    = "static/taskcluster/worker-manager"
#      accessToken = "${random_string.worker_manager_access_token.result}"
#      description = "..."
#
#      scopes = []
#    },
#    {
#      clientId    = "static/taskcluster/github"
#      accessToken = "${random_string.github_access_token.result}"
#      description = "..."
#
#      scopes = [
#        "assume:repo:github.com/*",
#        "assume:scheduler-id:taskcluster-github/*",
#        "auth:azure-table-access:${azurerm_storage_account.base.name}/TaskclusterGithubBuilds",
#        "auth:azure-table-access:${azurerm_storage_account.base.name}/TaskclusterIntegrationOwners",
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/TaskclusterGithubBuilds",
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/TaskclusterIntegrationOwners",
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/TaskclusterChecksToTasks",
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/TaskclusterCheckRuns",
#      ]
#    },
#    {
#      clientId    = "static/taskcluster/hooks"
#      accessToken = "${random_string.hooks_access_token.result}"
#      description = "..."
#
#      scopes = [
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/Hooks",
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/Queue",
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/LastFire2",
#        "assume:hook-id:*",
#        "notify:email:*",
#        "queue:create-task:*",
#      ]
#    },
#    {
#      clientId    = "static/taskcluster/notify"
#      accessToken = "${random_string.notify_access_token.result}"
#      description = "..."
#
#      scopes = [
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/DenylistedNotification",
#      ]
#    },
#    {
#      clientId    = "static/taskcluster/purge-cache"
#      accessToken = "${random_string.purge_cache_access_token.result}"
#      description = "..."
#
#      scopes = [
#        "auth:azure-table:read-write:${azurerm_storage_account.base.name}/CachePurges",
#      ]
#    },
#    {
#      clientId    = "static/taskcluster/built-in-workers"
#      accessToken = "${random_string.built_in_workers_access_token.result}"
#      description = "..."
#
#      scopes = [
#        "queue:claim-work:built-in/*",
#        "assume:worker-id:built-in/*",
#        "queue:worker-id:built-in/*",
#        "queue:resolve-task",
#      ]
#    },
#    {
#      clientId    = "static/taskcluster/queue"
#      accessToken = "${random_string.queue_access_token.result}"
#      description = "..."
#
#      scopes = ["*"]
#    },
#    {
#      clientId    = "static/taskcluster/root"
#      accessToken = "${random_string.auth_root_access_token.result}"
#      description = "..."
#      scopes      = ["*"]
#    },
#  ]
#}
#
#
#authSecretsSecrets = {
#    AWS_ACCESS_KEY_ID     = "${module.auth_user.access_key_id}"
#    AWS_SECRET_ACCESS_KEY = "${module.auth_user.secret_access_key}"
#    AWS_REGION            = "${var.aws_region}"
#    AZURE_ACCOUNT_KEY     = "${azurerm_storage_account.base.primary_access_key}"
#    AZURE_ACCOUNT         = "${azurerm_storage_account.base.name}"
#
#    AZURE_ACCOUNTS = "${jsonencode(map(
#      "${azurerm_storage_account.base.name}", "${azurerm_storage_account.base.primary_access_key}",
#    ))}"
#
#    STATIC_CLIENTS    = "${jsonencode(local.static_clients)}"
#    PULSE_HOSTNAME    = "${var.rabbitmq_hostname}"
#    PULSE_VHOST       = "${var.rabbitmq_vhost}"
#    PULSE_USERNAME    = "${module.auth_rabbitmq_user.username}"
#    PULSE_PASSWORD    = "${module.auth_rabbitmq_user.password}"
#    AZURE_CRYPTO_KEY  = "${base64encode(random_string.auth_table_crypto_key.result)}"
#    AZURE_SIGNING_KEY = "${random_string.auth_table_signing_key.result}"
#
#    FORCE_SSL            = "false"
#    TRUST_PROXY          = "true"
#    LOCK_ROLES           = "false"
#    MONITORING_ENABLE    = "true"
#    NODE_ENV             = "production"
#    OWNER_EMAIL          = "bstack@mozilla.com"
#    PROFILE              = "production"
#    PUBLISH_METADATA     = "false"
#    SENTRY_API_KEY       = "TODO SENTRY 4"
#    SENTRY_DSN           = "TODO"
#    SENTRY_AUTH_TOKEN    = "TODO"
#    STATSUM_API_SECRET   = "TODO"
#    STATSUM_BASE_URL     = "TODO"
#    WEBSOCKTUNNEL_SECRET = "${random_string.auth_websocktunnel_secret.result}"
#  }
#}

